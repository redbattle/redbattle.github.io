(window.webpackJsonp=window.webpackJsonp||[]).push([[68],{413:function(n,e,t){"use strict";t.r(e);var s=t(8),r=Object(s.a)({},(function(){var n=this,e=n._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h3",{attrs:{id:"https"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#https"}},[n._v("#")]),n._v(" https")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("```bash\n# 80 重定向到 443\nserver {\n    listen 80;\n    server_name <domain>;\n    return 301 https://$server_name$request_uri;\n}\n# 443 配置\nserver {\n    listen 443;\n    server_name <domain>;\n    ssl on;\n    root <path to project>;\n    index index.html index.htm index.php;\n    ssl_certificate   /etc/nginx/cert/xxx.pem;\n    ssl_certificate_key  /etc/nginx/cert/xxx.key;\n    ssl_session_timeout 5m;\n    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n    ssl_prefer_server_ciphers on;\n    location / {\n        try_files $uri $uri/ /index.php?$query_string;\n    }\n    location ~ \\.php$ {\n        fastcgi_pass unix:/var/run/php/php7.1-fpm.sock;\n        fastcgi_index index.php;\n        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n        include fastcgi_params;\n    }\n}\n```\n")])])]),e("h3",{attrs:{id:"http"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#http"}},[n._v("#")]),n._v(" http")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("```bash\nserver {\n    listen 80 ;\n    server_name <domain>;\n    root <path to project>;\n    index index.php index.html index.htm;\n    location / {\n        try_files $uri $uri/ /index.php?$query_string;\n    }\n    location ~ \\.php$ {\n        fastcgi_pass unix:/var/run/php/php7.1-fpm.sock;\n        fastcgi_index index.php;\n        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n        include fastcgi_params;\n    }\n}  \n```\n")])])]),e("h3",{attrs:{id:"http-docker"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#http-docker"}},[n._v("#")]),n._v(" http-docker")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("```bash\nserver {\n    listen       80;\n    server_name  <domain>;\n    root <path to project>;\n    location / {\n        index  index.html index.htm index.php;\n        try_files $uri $uri/ /index.php?$args;\n    }\n    location ~ \\.php$ {\n        index index.php;\n        #try_files $uri $uri/ /index.php?$args;\n        fastcgi_pass   php:9000;\n        fastcgi_index  index.php;\n        fastcgi_param  SCRIPT_FILENAME $document_root$fastcgi_script_name;\n        include        fastcgi_params;\n    }\n}\n```\n")])])]),e("h3",{attrs:{id:"端口转发"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#端口转发"}},[n._v("#")]),n._v(" 端口转发")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("```bash\nserver\n{\n    listen 80;\n    server_name <domain>;\n    location / \n    {\n        proxy_redirect off;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_pass http://localhost:9000;\n    }\n    location ~ .*\\.(php|jsp|cgi|asp|aspx|flv|swf|xml)?$\n    { \n        proxy_set_header Host $host;\n        proxy_set_header X-Forwarded-For $remote_addr;\n        proxy_pass http://localhost:9000;\n        \n    }\n}\n```\n")])])]),e("h3",{attrs:{id:"大文件上传配置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#大文件上传配置"}},[n._v("#")]),n._v(" 大文件上传配置")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("```bash\n// 修改nginx.conf\nclient_max_body_size 128M; \n\n// PHP环境修改php.ini\nmemory_limit=128M; 每个PHP页面所吃掉的最大内存\nfile_uploads=on; 是否允许通过HTTP上传文件的开关\nupload_tmp_dir=8M; 文件上传至服务器上存储临时文件的地方，如果没指定就会用系统默认的临时文件夹\nupload_max_filesize=8M ;即允许上传文件大小的最大值\npost_max_size=8M; 指通过表单POST给PHP的所能接收的最大值，包括表单里的所有值\n```\n")])])]),e("h3",{attrs:{id:"其他配置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#其他配置"}},[n._v("#")]),n._v(" 其他配置")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v('```bash\n# 定义Nginx运行的用户和用户组\nuser www www;\n# nginx进程数，建议设置为等于CPU总核心数。\nworker_processes 8;\n# 全局错误日志定义类型，[ debug | info | notice | warn | error | crit ]\nerror_log /var/log/nginx/error.log info;\n# 进程文件\npid /var/run/nginx.pid;\n# 一个nginx进程打开的最多文件描述符数目，理论值应该是最多打开文件数（系统的值ulimit -n）与nginx进程数相除，但是nginx分配请求并不均匀，所以建议与ulimit -n的值保持一致。\nworker_rlimit_nofile 65535;\n# 工作模式与连接数上限\nevents\n{\n    # 参考事件模型，use [ kqueue | rtsig | epoll | /dev/poll | select | poll ]; epoll模型是Linux 2.6以上版本内核中的高性能网络I/O模型，如果跑在FreeBSD上面，就用kqueue模型。\n    use epoll;\n    # 单个进程最大连接数（最大连接数=连接数*进程数）\n    worker_connections 65535;\n}\n\n# 设定http服务器\nhttp\n{\n    include mime.types; # 文件扩展名与文件类型映射表\n    default_type application/octet-stream; # 默认文件类型\n    # charset utf-8; #默认编码\n    server_names_hash_bucket_size 128; # 服务器名字的hash表大小\n    client_header_buffer_size 32k; # 上传文件大小限制\n    large_client_header_buffers 4 64k; # 设定请求缓\n    client_max_body_size 8m; # 设定请求缓\n    sendfile on; # 开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。注意：如果图片显示不正常把这个改成off。\n    autoindex on; # 开启目录列表访问，合适下载服务器，默认关闭。\n    tcp_nopush on; # 防止网络阻塞\n    tcp_nodelay on; # 防止网络阻塞\n    keepalive_timeout 120; # 长连接超时时间，单位是秒\n    # FastCGI相关参数是为了改善网站的性能：减少资源占用，提高访问速度。下面参数看字面意思都能理解。\n    fastcgi_connect_timeout 300;\n    fastcgi_send_timeout 300;\n    fastcgi_read_timeout 300;\n    fastcgi_buffer_size 64k;\n    fastcgi_buffers 4 64k;\n    fastcgi_busy_buffers_size 128k;\n    fastcgi_temp_file_write_size 128k;\n    # gzip模块设置\n    gzip on; # 开启gzip压缩输出\n    gzip_min_length 1k; # 最小压缩文件大小\n    gzip_buffers 4 16k; # 压缩缓冲区\n    gzip_http_version 1.0; # 压缩版本（默认1.1，前端如果是squid2.5请使用1.0）\n    gzip_comp_level 2; # 压缩等级\n    gzip_types text/plain application/x-javascript text/css application/xml;\n    # 压缩类型，默认就已经包含text/html，所以下面就不用再写了，写上去也不会有问题，但是会有一个warn。\n    gzip_vary on;\n    # limit_zone crawler $binary_remote_addr 10m; #开启限制IP连接数的时候需要使用\n    upstream blog.ha97.com {\n        # upstream的负载均衡，weight是权重，可以根据机器配置定义权重。weigth参数表示权值，权值越高被分配到的几率越大。\n        server 192.168.80.121:80 weight=3;\n        server 192.168.80.122:80 weight=2;\n        server 192.168.80.123:80 weight=3;\n    }\n    #虚拟主机的配置\n    server\n    {\n        #监听端口\n        listen 80;\n        #域名可以有多个，用空格隔开\n        server_name www.ha97.com ha97.com;\n        index index.html index.htm index.php;\n        root /data/www/ha97;\n        location ~ .*\\.(php|php5)?$\n        {\n            fastcgi_pass 127.0.0.1:9000;\n            fastcgi_index index.php;\n            include fastcgi.conf;\n        }\n        #图片缓存时间设置\n        location ~ .*\\.(gif|jpg|jpeg|png|bmp|swf)$\n        {\n            expires 10d;\n        }\n        #JS和CSS缓存时间设置\n        location ~ .*\\.(js|css)?$\n        {\n            expires 1h;\n        }\n        #日志格式设定\n        log_format access \'$remote_addr - $remote_user [$time_local] "$request" \'\n        \'$status $body_bytes_sent "$http_referer" \'\n        \'"$http_user_agent" $http_x_forwarded_for\';\n        #定义本虚拟主机的访问日志\n        access_log /var/log/nginx/ha97access.log access;\n        #对 "/" 启用反向代理\n        location / {\n            proxy_pass http://127.0.0.1:88;\n            proxy_redirect off;\n            proxy_set_header X-Real-IP $remote_addr;\n            #后端的Web服务器可以通过X-Forwarded-For获取用户真实IP\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            #以下是一些反向代理的配置，可选。\n            proxy_set_header Host $host;\n            client_max_body_size 10m; #允许客户端请求的最大单文件字节数\n            client_body_buffer_size 128k; #缓冲区代理缓冲用户端请求的最大字节数，\n            proxy_connect_timeout 90; #nginx跟后端服务器连接超时时间(代理连接超时)\n            proxy_send_timeout 90; #后端服务器数据回传时间(代理发送超时)\n            proxy_read_timeout 90; #连接成功后，后端服务器响应时间(代理接收超时)\n            proxy_buffer_size 4k; #设置代理服务器（nginx）保存用户头信息的缓冲区大小\n            proxy_buffers 4 32k; #proxy_buffers缓冲区，网页平均在32k以下的设置\n            proxy_busy_buffers_size 64k; #高负荷下缓冲大小（proxy_buffers*2）\n            proxy_temp_file_write_size 64k;\n            #设定缓存文件夹大小，大于这个值，将从upstream服务器传\n        }\n        #设定查看Nginx状态的地址\n        location /NginxStatus {\n            stub_status on;\n            access_log on;\n            auth_basic "NginxStatus";\n            auth_basic_user_file conf/htpasswd;\n            # htpasswd文件的内容可以用apache提供的htpasswd工具来产生。\n        }\n        #本地动静分离反向代理配置\n        #所有jsp的页面均交由tomcat或resin处理\n        location ~ .(jsp|jspx|do)?$ {\n            proxy_set_header Host $host;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_pass http://127.0.0.1:8080;\n        }\n        #所有静态文件由nginx直接读取不经过tomcat或resin\n        location ~ .*.(htm|html|gif|jpg|jpeg|png|bmp|swf|ioc|rar|zip|txt|flv|mid|doc|ppt|pdf|xls|mp3|wma)$\n        {\n            expires 15d;\n        }\n        location ~ .*.(js|css)?$\n        {\n            expires 1h;\n        }\n    }\n}\n```')])])])])}),[],!1,null,null,null);e.default=r.exports}}]);