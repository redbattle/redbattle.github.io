(window.webpackJsonp=window.webpackJsonp||[]).push([[71],{415:function(t,s,e){"use strict";e.r(s);var n=e(8),a=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h3",{attrs:{id:"tsconfig-json配置文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tsconfig-json配置文件"}},[t._v("#")]),t._v(" tsconfig.json配置文件")]),t._v(" "),s("div",{staticClass:"language-ts extra-class"},[s("pre",{pre:!0,attrs:{class:"language-ts"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 此文件由命令 tsc -init 生成")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 直接运行 tsc 命令就会运用此配置文件")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 选项详解：https://www.tslang.cn/docs/handbook/compiler-options.html")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "include": ["demo15-1.ts"],              // 要编译的指定文件，不配置此项时运行tsc默认编译全部')]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "files": ["demo15-1.ts"],                // 和include类似')]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "exclude": ["demo15-3.ts"],              // 要排除编译的指定文件')]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v('"compilerOptions"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 编译选项")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 基本选项 */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "incremental": true,                   /* 启用增量编译 */')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v('"target"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"es5"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("                          "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 指定 ECMAScript 目标版本: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', 'ES2018', 'ES2019' or 'ESNEXT'. */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v('"module"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"commonjs"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("                     "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 指定模块代码生成: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', or 'ESNext'. */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "lib": [],                             /* 指定要包含在编译中的库文件. */')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "allowJs": true,                       /* 允许编译javascript文件*/')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "checkJs": true,                       /* 报告.js文件中的错误。 */')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// \"jsx\": \"preserve\",                     /* 指定 JSX代码生成: 'preserve', 'react-native', or 'react'. */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "declaration": true,                   /* 生成相应的 .d.ts文件 */')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "declarationMap": true,                /* 为每个相应的 .d.ts文件生成一个sourcemap (编译后代码对源码的映射)*/')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v('"sourceMap"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("                        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 生成源文件与输出文件的映射关系文件(.map)。*/")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "outFile": "./",                       /* 将输出文件合并为一个文件. */')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v('"outDir"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"./build"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("                      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 输出的js文件目录。 */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v('"rootDir"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"./src"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("                       "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* ts源文件目录。 */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "composite": true,                     /* 启用 项目编译 */')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "tsBuildInfoFile": "./",               /* 指定用于存储增量编译信息的文件 */')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "removeComments": true,                /* 不输出注释到编译结果.（删除所有注释，除了以 /!*开头的版权信息。） */')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "noEmit": true,                        /* 不发出输出.Do not emit outputs. */')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// \"importHelpers\": true,                 /* 从“tslib”导入发出助手. Import emit helpers from 'tslib'. */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// \"downlevelIteration\": true,            /* Provide full support for iterables in 'for-of', spread, and destructuring when targeting 'ES5' or 'ES3'. */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "isolatedModules": true,               /* 将每个文件作为单独的模块（与“ts.transpileModule”类似） */')]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 严格的类型检查选项 */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v('"strict"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("                           "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 启用所有严格类型检查选项。 打开此选项后，下面这些选项就不需要单独设置*/")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "noImplicitAny": true,                 /* 对隐含的“any”类型的表达式和声明引发错误. (为false时允许any不用特意声明)*/')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "strictNullChecks": true,              /* 启用严格的null检查. (为false时允许赋值为null)*/')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "strictFunctionTypes": true,           /* 启用严格检查函数类型. */')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "strictBindCallApply": true,           /* 启用函数上严格的“bind”、“call”和“apply”方法. */')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "strictPropertyInitialization": true,  /* 启用 严格检查类中的属性初始化. */')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "noImplicitThis": true,                /* 在隐含的“any”类型的“this”表达式上引发错误。 */')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "alwaysStrict": true,                  /* 以严格模式解析并为每个源文件发出“use strict”。 */')]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 附加检查。Additional Checks  */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "noUnusedLocals": true,                /* 若有未使用的局部变量则抛错 */')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "noUnusedParameters": true,            /* 若有未使用的参数则抛错。 */')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "noImplicitReturns": true,             /* 不是函数的所有返回路径都有返回值时报错。*/')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "noFallthroughCasesInSwitch": true,    /* 报告switch语句的fallthrough错误。（即，不允许switch的case语句贯穿） */')]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 模块解析选项 */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// \"moduleResolution\": \"node\",            /* 决定如何处理模块：'node' (Node.js) or 'classic' (TypeScript pre-1.6). */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "baseUrl": "./",                       /* 用于解析非绝对模块名称的基础目录。 */')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "paths": {},                           /* 模块名到基于 baseUrl的路径映射的列表。 */')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "rootDirs": [],                        /* List of root folders whose combined content represents the structure of the project at runtime. */')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "typeRoots": [],                       /* List of folders to include type definitions from. */')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "types": [],                           /* 要包含的类型声明文件名列表 */')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "allowSyntheticDefaultImports": true,  /* Allow default imports from modules with no default export. This does not affect code emit, just typechecking. */')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v('"esModuleInterop"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("                   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 启用s emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'. */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "preserveSymlinks": true,              /* Do not resolve the real path of symlinks. */')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "allowUmdGlobalAccess": true,          /* Allow accessing UMD globals from modules. */')]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Source Map Options */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "sourceRoot": "",                      /* Specify the location where debugger should locate TypeScript files instead of source locations. */')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "mapRoot": "",                         /* Specify the location where debugger should locate map files instead of generated locations. */')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "inlineSourceMap": true,               /* Emit a single file with source maps instead of having a separate file. */')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// \"inlineSources\": true,                 /* Emit the source alongside the sourcemaps within a single file; requires '--inlineSourceMap' or '--sourceMap' to be set. */")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Experimental Options */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "experimentalDecorators": true,        /* 启用s experimental support for ES7 decorators. */')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "emitDecoratorMetadata": true,         /* 启用s experimental support for emitting type metadata for decorators. */')]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=a.exports}}]);